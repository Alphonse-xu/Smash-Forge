<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAABC
        DgAAAk1TRnQBSQFMAgEBBAEAASgBAAEoAQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABIAMAAQEBAAEYBgABGP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/ACEAAZ8B1wHuAXAB1QH/AXAB1QH/
        AXAB1QH/AXAB1AH+AXEB1QH/AW8B1QH/AXAB1QH/AXAB1AH+AXAB1AH/AW8B1AH/AXAB1QH/AXAB0wH/
        AW8B1QH/AXAB1QH/BgADSSEwA74DAAHOAbQBrwHOAbQBrwHOAbQBrwGAAX0BxQErAUEB3QEsAUIB3QG0
        AaIBtgGSAYoBwAGUAYsBwAHIAbABsQHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwJj
        AbwCYwG8AmMBvAJjAbwCYwG8AmMBvAJjAbwCYwG8AmMBvAJjAbwCYwG8AmMBvAJjAbwCYwG8AmMBvAJj
        AbwDAAGwAeQB+QFzAdcB/gF0AdYB/gF0AdgB/wFzAdcB/gFzAdcB/wFzAdcB/gFzAdcB/gF0AdYB/gFz
        AdcB/gFzAdcB/gFzAdcB/gFzAdcB/gFyAdcB/gF0AdgB/wYAAzAhAAMwAwABzgG0Aa8B5gHeAd0BvQG5
        AdgBLQFCAd0BeQGCAdsBpgGsAeIBKwFBAd0BNAFIAd4BOQFNAd0BxwHGAeAB6wHmAeUB6wHmAeUB6wHm
        AeUB6wHmAeUB5AHbAdoBzgG0Aa8CYwG8AqkB1gLSAeYC0gHmAtIB5gLSAeYC0gHmAtIB5gLSAeYC0gHm
        AtIB5gLSAeYC0gHmAtIB5gKpAdYCYwG8AwABmwHiAf4BeAHZAf8BeAHZAf8BdgHZAf8BeAHZAf8BeAHZ
        Af8BeAHZAf8BeAHZAf8BeAHZAf8BeAHZAf8BeAHZAf8BdwHZAf8BdgHZAf8BdgHZAf8BeAHZAf8GAAMw
        IQADMAMAAc4BtAGvAfgC9wGoAa8B5wErAUEB3QFKAVwB3wHdAeAB8gErAUEB3QGgAakB5wHaAd0B8QHw
        AfEB9wwAAfQC8wHOAbQBrwJjAbwC1gHnJAAC1gHnAmMBvAMAAY4B4AH/AXsB2wH/AXsB2wH/AXsB2wH/
        AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/
        AXsB2wH/BgADMAMAA50VMAP/AwADMAMAAc4BtAGvAfgC9wL7AfwBawF5AeEBKwFBAd0BxgHLAe0BTQFg
        Ad8B7QHuAfYB0gHWAe8PAAH0AvMBzgG0Aa8CYwG8AtYB5yQAAtYB5wJjAbwDAAGQAeIB/gF+AdwB/wF+
        AdwB/wF+AdwB/wF+AdwB/wF+AdwB/wF+AdwB/wF+AdwB/wF+AdwB/wF+AdwB/wF/Ad0B/wF+AdwB/wF+
        AdwB/wF+AdwB/wF+AdwB/wYAAzAGABVbBgADMAMAAc4BtAGvAfgC9wL1AfkBrgG1AekBKwFBAd0BKwFB
        Ad0BMAFGAd4BXgFuAeED/g8AAfQC8wHOAbQBrwJjAbwC1gHnA+kD5AYAA9YGigPsAwAD1wP0AwAC1gHn
        AmMBvAMAAZMB5AH+AYIB3wH/AYEB4QH/AYIB3wH+AYIB3wH/AYIB3wH+AYIB3wH/AYIB3wH/AYIB3wH+
        AYIB3wH+AYIB3wH/AYIB3wH/AYIB3wH+AYIB3wH+AYIB3wH/BgADMCEAAzADAAHDAawBsgGKAZMB4AEv
        AUMB3QErAUEB3QErAUEB3QErAUEB3QErAUEB3QE0AUgB3gHzAfQB+A8AAfQC8wHOAbQBrwJjAbwC1gHn
        A9QDyAYAA/QDjwO5A/kDAAOrA+kDAALWAecCYwG8AwABlwHlAf8BhgHiAf8BhgHiAf8BhQHhAf4BhQHh
        Af4BhQHgAf8BhgHiAf8BhgHiAf8BhgHiAf8BhgHhAf8BhQHiAf8BhgHiAf8BhgHiAf8BhgHiAf8BhQHi
        Af8GAAMwBgAVMAYAAzADAAFPAVoB0wGUAZ0B4wHQAdQB7wHEAckB7AErAUEB3QErAUEB3QErAUEB3QEr
        AUEB3QE3AU0B3AHHAcsB7AwAAfQC8wHOAbQBrwJjAbwC1gHnA9QDyAkAA7cD4gYAA6sD6QMAAtYB5wJj
        AbwDAAGaAecB/wGIAeMB/gGIAeMB/gGIAeMB/gGIAeMB/gGIAeMB/gGIAeMB/gGIAeMB/gGIAeMB/gGI
        AeMB/gGJAeQB/wGIAeMB/gGIAeMB/gGIAeMB/gGIAeMB/gYAAzAGABUwBgADMAMAAWgBbAHMAa8BtAHm
        AdAB1AHvAcEBxgHsAa4BtQHpAaIBqwHnAXABfgHiATkBTQHdASsBQQHdASsBQQHdAesB7AH1CQAB9ALz
        Ac4BtAGvAmMBvALWAecD1AM0A1UD7QMAA7cD4gYAA6sD6QMAAtYB5wJjAbwDAAGeAeoB/wGMAeYB/wGM
        AeYB/wGMAeYB/wGMAeYB/wGMAeYB/gGMAeYB/wGMAecB/wGMAeYB/wGNAecB/wGMAeYB/wGMAeYB/wGM
        AeYB/wGMAeYB/wGMAeYB/wYAAzAhAAMwAwABzgG0Aa8D9wHyAfMB+AF3AYQB4wHYAdoB8AHvAfAB9gL8
        Af0D/gH0AfUB+AGqAbMB6QHmAegB8wkAAfQC8wHOAbQBrwJjAbwC1gHnA9QDtwP2A/0DAAO3A+IGAAOr
        A+kDAALWAecCYwG8AwABoAHrAf8BkAHoAf8BkAHoAf8BkAHoAf8BkAHoAf8BjwHpAf8BkAHoAf8BjwHo
        Af8BkAHoAf8BkAHoAf8BkAHoAf8BkAHoAf8BkAHoAf8BkAHoAf8BkAHoAf8GAAMwBgAMkg8AAzADAAHO
        AbQBrwH4AvcDAAP+AvQB+AHfAeIB8gHEAckB7AG5Ab8B6gG1Ab0B6gHfAeEB8gwAAfQC8wHOAbQBrwJj
        AbwC1gHnA9QDyAkAA7cD4gYAA6sD6QMAAtYB5wJjAbwD/wGhAe0B/wGTAekB/wGTAekB/wGTAekB/wGR
        AeoB/gGTAekB/wGTAekB/wGTAekB/wGTAekB/wGTAekB/wGTAekB/wGTAekB/wGTAekB/wGTAekB/wGT
        AekB/wYAAzADAANyDzAMAAMwAwABzgG0Aa8B+AL3JAAB9ALzAc4BtAGvAmMBvALWAecD2AMeAyAD2QO0
        AxwDHgPeA0oDHAMeA6kC1gHnAmMBvAHhAe0B8wGlAe8B/wGWAewB/wGWAewB/gGWAewB/wGWAewB/gGX
        AewB/gGOAd8B+wGNAeAB+gGOAeAB+gGNAeEB+QGOAeEB+QGOAeAB+gGNAeAB+gGOAeAB+gGPAeAB+gYA
        AzAYAAwwAwABzgG0Aa8B+AL3JAAB9ALzAc4BtAGvAmMBvALWAeckAALWAecCYwG8AwABpwHwAf8BlwHu
        Af4BlwHuAf4BlwHuAf4BmAHuAf4BnAHjAfoBlQHsAf4BlQHsAf8BlQHsAf8BlQHsAf8BlQHsAf8BlQHs
        Af8BlQHsAf8BlQHsAf8BlQHsAf8GAAMwFQADuQkwBgABzgG0Aa8B5QHeAd0B6gHlAeQB6gHlAeQB6gHl
        AeQB6gHlAeQB6gHlAeQB6gHlAeQB6gHlAeQB6gHlAeQB6gHlAeQB6gHlAeQB6gHlAeQB6gHlAuQB2wHZ
        Ac4BtAGvAmMBvALWAeckAALWAecCYwG8AwAB8gH1AfcBjgHgAfoBjgHgAfkBjgHgAfoBjgHfAfoBlwHt
        Af8B7QHzAfYB7QHzAfYB7QHzAfYB7QHzAfYB7QHzAfYB7QHzAfYB7QHzAfYB7QHzAfYB7QHzAfYGAAMw
        FQADgwYwCQABzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0
        Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8CYwG8AtAB5CT7AtAB5AJj
        AbwGAAGbAfAB/wGbAfAB/wGaAe8B/wGbAfAB/wGaAe8B/iEAHjAMAAHOAbQBrwHOAbQBrwHOAbQBrwHO
        AbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHO
        AbQBrwHOAbQBrwHOAbQBrwJjAbwCYwG8AmMBvAJjAbwCYwG8AmMBvAJjAbwCYwG8AmMBvAJjAbwCYwG8
        AmMBvAJjAbwCYwG8AmMBvAJjAbwGAAFcAcYB8gFdAccB8wFdAccB8wFdAccB8wFdAccB8icAFUYPAAHO
        AbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHO
        AbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwHOAbQBrwJjAbwCYwG8AmMBvAJjAbwCYwG8AmMBvAJj
        AbwCYwG8AmMBvAJjAbwCYwG8AmMBvAJjAbwCYwG8AmMBvAJjAbwBQgFNAT4HAAE+AwABKAMAAUADAAEg
        AwABAQEAAQEGAAEBFgAD/4EAAYABAAHAAQEEAAGAAQAB3wH9BAABgAEAAd8B/QEAATwBPwH8AYABAAHQ
        AQUBAAF8AT8B/AGAAQAB2AENAQABfAEMASQBgAEAAd8B/QEAAXwBDAEkAYABAAHYAQ0BAAE8AQ4BZAGA
        AQAB2AENAQABHAECAWQBgAEAAd8B/QEAARwBAgFkAYABAAHYAX0BIAE8AQ4BZAIAAdABPQE/AfwEAAHf
        AeEBPwH8AT8B/AGAAQAB3wHDAgABPwH8AYABAAHfAccEAAHBAf8BwAEPBAABwQH/AfABHwQACw==
</value>
  </data>
</root>