<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAC0
        DgAAAk1TRnQBSQFMAgEBAwEAAQgBAAEIAQABFAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFQ
        AwABEAMAAQEBAAEYBgABDxUAAbsB3gHtAYMB1gH4AXAB1QH/AXAB1QH/AXAB1QH/AXAB1AH+AXEB1QH/
        AXAB1QH/AW8B1QH/AXAB1QH/AXAB1AH+AXAB1AH/AXAB1AH/AW8B1AH/AXAB1QH/AXAB0wH/AW8B1AH/
        AW8B1QH/AZ0B3QH4BgADtAM/JzADhQPcAwABzgG0Aa8BzgG0Aa8BzgG0Aa8BzQGzAa8BbQFwAcoBKwFB
        Ad0BKwFBAd0BawFuAcsBugGmAbUBigGEAcIBjgGHAcEBvQGoAbQBzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0
        Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8/AAHFAecB8wGMAdwB/AFzAdcB/gF0AdYB/gF0AdgB/wFz
        AdcB/gFzAdcB/wFzAdcB/wFzAdcB/gFzAdcB/gF0AdYB/gFzAdcB/gFzAdcB/gFzAdcB/gFzAdcB/gFz
        AdcB/gFyAdcB/gFzAdcB/gGfAd8B+AYAA6sDqicAA6sDqgMAAc4BtAGvAd0B0QHOAeoB5QHkAXsBgAHU
        ASsBQQHdAVIBYQHYAtwB6AEvAUMB3QErAUEB3QE2AUkB3gE9AVEB3gGNAZQB3AHrAeYB5QHrAeYB5QHr
        AeYB5QHrAeYB5QHrAeYB5QHrAeYB5QHcAc0BywHOAbQBrz8AAbgB5gH2AYYB3QH/AXgB2QH/AXgB2QH/
        AXYB2QH/AXgB2QH/AXgB2QH/AXgB2QH/AXgB2QH/AXgB2QH/AXgB2QH/AXgB2QH/AXgB2QH/AXgB2QH/
        AXcB2QH/AXYB2QH/AXYB2QH/AXcB2QH/AaEB4AH4BgADqwOqJwADqwOqAwABzgG0Aa8B6QHkAeMD/gE0
        AUgB3QErAUEB3QErAUEB3QH1AfYB+QFJAVsB3wErAUEB3QG4Ab4C6wHsAfUBygHPAe0SAAHmAd8B3QHO
        AbQBrz8AAa8B5AH3AYMB3QH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/
        AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AXsB2wH/AaMB4AH4
        BgADqwOqA/QDnQNGFTADWQP/A/gDqwOqAwABzgG0Aa8B6QHkAeMDAAHuAe8B9gFRAWIB4AErAUEB3QGu
        AbUB6QF+AYoB4wGDAY8B5ALyAfcBvwHEAesVAAHmAd8B3QHOAbQBrz8AAbIB5gH2AYUB3gH/AX4B3AH/
        AX4B3AH/AX4B3AH/AX4B3AH/AX4B3AH/AX4B3AH/AX4B3AH/AX4B3AH/AX4B3AH/AX4B3AH/AX4B3AH/
        AX8B3QH/AX4B3AH/AX4B3AH/AX4B3AH/AX4B3AH/AaUB4QH4BgADqwOqBgADkBVbA48GAAOrA6oDAAHO
        AbQBrwHpAeQB4wP+AekB6gH1AaABqQHnASsBQQHdASsBQQHdASsBQQHdAToBTgHeAWABbwHgA/4VAAHm
        Ad8B3QHOAbQBrz8AAbMB5wH2AYkB4QH/AYIB4AH/AYEB4QH/AYIB3wH+AYIB3wH/AYIB3wH+AYIB3wH+
        AYIB3wH/AYIB3wH/AYIB3wH+AYIB3wH+AYIB3wH+AYIB3wH/AYIB3wH/AYIB3wH+AYIB3wH+AYIB3wH+
        AagB4wH4BgADqwOqJwADqwOqAwABygGyAbABnQGgAdcBSwFdAd4BKwFBAd0BKwFBAd0BKwFBAd0BKwFB
        Ad0BKwFBAd0BKwFBAd0BNgFJAd4B7gHvAfYVAAHmAd8B3QHOAbQBrz8AAbUB5wH3AY0B4wH/AYYB4gH/
        AYYB4gH/AYUB4QH+AYUB4QH+AYUB4AH/AYUB4QH/AYYB4gH/AYYB4gH/AYYB4gH/AYYB4QH/AYYB4QH/
        AYUB4gH/AYYB4gH/AYYB4gH/AYYB4gH/AYYB4gH/AakB5QH4BgADqwOqBgADdBUwA3MGAAOrA6oDAAFU
        AV4B0QFsAXoB3gG/AcQB6wHWAdkB8AG/AcUB6wErAUEB3QErAUEB3QErAUEB3QErAUEB3QErAUEB3QEv
        AUIB3AGUAZ8B5gL4AfoPAAHmAd8B3QHOAbQBrz8AAbgB6QH3AY8B5QH+AYgB4wH+AYgB4wH+AYgB4wH+
        AYgB4wH+AYgB4wH+AYgB4wH+AYgB4wH+AYgB4wH+AYgB4wH+AYgB4wH+AYgB4wH+AYkB5AH/AYgB4wH+
        AYgB4wH+AYgB4wH+AYgB4wH+AawB5gH2BgADqwOqBgADdBUwA3MGAAOrA6oDAAFkAWoBzQGaAZ4B2wHB
        AcYB7AHaAd0B8AG1AbwB6gGqAbEB6QGvAbcB6QGLAZcB5QFfAW8B4QE0AUgB3gErAUEB3QErAUEB3QFw
        AX8B4g8AAeYB3wHdAc4BtAGvPwABuwHqAfcBkwHoAf8BjAHmAf8BjAHmAf8BjAHmAf8BjAHmAf8BjAHm
        Af4BjAHmAf4BjAHmAf8BjAHnAf8BjAHmAf8BjQHnAf8BjQHnAf8BjAHmAf8BjAHmAf8BjAHmAf8BjAHm
        Af8BjAHmAf8BrgHoAfgGAAOrA6onAAOrA6oDAAHOAbQBrwHpAeQB4wP9AdoB3QHxAWwBewHhAdUB2AHv
        AekB6wH1AvcB+gb+AvYB+QHYAdoB8AF7AYgB4w8AAeYB3wHdAc4BtAGvPwABuwHqAfcBlgHpAf8BkAHo
        Af8BkAHoAf8BkAHoAf8BkAHoAf8BjwHpAf8BjwHpAf8BkAHoAf8BjwHoAf8BkAHoAf8BkAHoAf8BkAHo
        Af8BkAHoAf8BkAHoAf8BkAHoAf8BkAHoAf8BkAHoAf8BsAHpAfgGAAOrA6oGAAOyDJID8w8AA6sDqgMA
        Ac4BtAGvAekB5AHjBgAD/gH1AfYB+QHmAegB8wHSAdYB7wG9AcIB6wG5Ab8B6gG4Ab4B6wHBAcYB7AP8
        DwAB5gHfAd0BzgG0Aa88AAP/AbQB8QH/AZkB6wH/AZMB6QH/AZMB6QH/AZMB6QH/AZEB6gH+AZIB6QH/
        AZMB6QH/AZMB6QH/AZMB6QH/AZMB6QH/AZMB6QH/AZMB6QH/AZMB6QH/AZMB6QH/AZMB6QH/AZMB6QH/
        AZMB6QH/AbMB6QH4BgADqwOqA/IDcgM9DzAD0wwAA6sDqgMAAc4BtAGvAekB5AHjMAAB5gHfAd0BzgG0
        Aa88AAHhAe0B8wGxAe8B/QGcAe0B/wGWAewB/wGWAewB/gGWAewB/wGWAewB/gGXAewB/gGTAecB/QGO
        Ad8B+wGNAeAB+gGOAeAB+gGNAeEB+QGNAeEB+QGOAeEB+QGOAeAB+gGNAeAB+gGOAeAB+gGOAeAB+gGw
        AeMB9QYAA6sDqhsAA9MMMAOqAwABzgG0Aa8B6QHkAeMwAAHmAd8B3QHOAbQBrz8AAcAB7QH3AZ0B7wH+
        AZcB7gH+AZcB7gH+AZcB7gH+AZgB7gH+AZoB5wH8AZkB5wH8AZUB7AH+AZUB7AH/AZUB7AH/AZUB7AH/
        AZUB7AH/AZUB7AH/AZUB7AH/AZUB7AH/AZUB7AH/AZUB7AH/AbMB7AH4BgADqwOqGAAD3AOCCTAD0wYA
        Ac4BtAGvAd0B0AHOAeoB5QHkAeoB5QHkAeoB5QHkAeoB5QHkAeoB5QHkAeoB5QHkAeoB5QHkAeoB5QHk
        AeoB5QHkAeoB5QHkAeoB5QHkAeoB5QHkAeoB5QHkAeoB5QHkAeoB5QHkAeoB5QHkAdsBzQHJAc4BtAGv
        PwAB8AHxAfMBtgHoAfkBjgHgAfoBjgHgAfkBjgHgAfoBjgHfAfoBkwHnAf0BuQHvAfsB7QHzAfYB7QHz
        AfYB7QHzAfYB7QHzAfYB7QHzAfYB7QHzAfYB7QHzAfYB7QHzAfYB7QHzAfYB7QHzAfYB7QHwAfIGAAOr
        A6oYAAPIA2IGMAPvCQABzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0
        Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0
        Aa8BzgG0Aa8BzgG0Aa9CAAHRAe4B9AGbAfAB/wGbAfAB/wGaAe8B/wGbAfAB/wGaAe8B/gHQAe4B9CcA
        A6shMANzDwABzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0
        Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0
        Aa8BzgG0Aa9CAAG6Ad8B8AFcAcYB8gFdAccB8wFdAccB8wFdAccB8wFdAccB8gG6AeAB8C0AA/EYRgOx
        EgABzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0
        Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0Aa8BzgG0
        Aa88AAFCAU0BPgcAAT4DAAEoAwABUAMAARADAAEBAQABAQUAAcAXAAP/AQABgAEAAQwBAAEBBwABgAEA
        AQwB/wH5BwABgAEAAQwB/wH5AQABDwHABAABgAEAAQwBAAEBASABHwHABAABgAEAAQwBwAEZAQABHwHA
        BAABgAEAAQwB/wH5AQABHwHABAABgAEAAQwBwAEZAQABBwHABAABgAEAAQwBwAEZAQABBwHABAABgAEA
        AQwB/wH5AQABBwHABAABgAEAAQwBwAH5ATABBwHABgABDAEAAXkBPwH/AcAGAAEMAf8BgQE/Af8BwAQA
        AYABAAEMAf8BAwcAAYABAAEMAf8BBwcAAcABfwH8AQABHwcAAcABfwH/AQABPwcACw==
</value>
  </data>
</root>