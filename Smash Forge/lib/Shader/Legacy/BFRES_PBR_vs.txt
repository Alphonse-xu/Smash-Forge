#version 120 
in vec3 vPosition;
in vec4 vColor;
in vec3 vNormal;
in vec2 vUV0;
in vec2 vUV1;
in vec4 vBone;
in vec4 vWeight;
in vec3 vTangent;
in vec3 vBitangent;

out vec2 f_texcoord0;
out vec2 f_texcoord1;
out vec2 f_texcoord2;
out vec3 normal;
out vec4 color;
out vec3 tangent;
out vec3 bitangent;
out vec3 v_pos;

uniform vec4 gsys_bake_st0;
uniform vec4 gsys_bake_st1;
uniform mat4 modelview;
uniform mat4 bones[100];
uniform int boneList[100];

vec3 skinNRM(vec3 nr, ivec4 index)
{
    vec3 nrmPos = vec3(0);

    if(vWeight.x != 0.0) nrmPos = mat3(bones[boneList[index.x]]) * nr * vWeight.x;
    if(vWeight.y != 0.0) nrmPos += mat3(bones[boneList[index.y]]) * nr * vWeight.y;
    if(vWeight.z != 0.0) nrmPos += mat3(bones[boneList[index.z]]) * nr * vWeight.z;
    if(vWeight.w != 0.0) nrmPos += mat3(bones[boneList[index.w]]) * nr * vWeight.w;

    return nrmPos;
}

void main()
{
    ivec4 index = ivec4(vBone); 

    vec4 objPos = vec4(vPosition.xyz, 1.0);

    vec4 sampler2 = gsys_bake_st0;
    vec4 sampler3 = gsys_bake_st1;

    if(vBone.x != -1){
        objPos = bones[boneList[index.x]] * vec4(vPosition, 1.0) * vWeight.x;
        objPos += bones[boneList[index.y]] * vec4(vPosition, 1.0) * vWeight.y;
        objPos += bones[boneList[index.z]] * vec4(vPosition, 1.0) * vWeight.z;
        if(vWeight.w < 1)
            objPos += bones[boneList[index.w]] * vec4(vPosition, 1.0) * vWeight.w;
    } 

    gl_Position = modelview * vec4(objPos.xyz, 1.0);

    vec3 distance = (objPos.xyz + vec3(5, 5, 5))/2;


    //gl_TexCoord[0] = vUV0;
    //gl_TexCoord[1] = vUV1;
    f_texcoord0 = vUV0;
    f_texcoord1 = vec2((vUV1 * sampler2.xy) + sampler2.zw);
    f_texcoord2 = vec2((vUV1 * sampler3.xy) + sampler3.zw);


    normal = normalize(mat3(modelview) * vNormal);
    normal = vNormal;
	tangent = vTangent;
	bitangent = vBitangent;
	v_pos = modelview * vec4(objPos.xyz, 1.0);

    color = vColor;
}