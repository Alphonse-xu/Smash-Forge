#version 120

in vec2 f_texcoord0;
in vec2 f_texcoord1;
in vec2 f_texcoord2;
in vec3 normal;
in vec4 color;
in vec3 tangent;
in vec3 bitangent;

uniform int uvChannel;
uniform vec3 difLightDirection;
uniform int renderType;
uniform int useNormalMap;
uniform vec4 colorSamplerUV;
uniform int renderVertColor;
uniform vec3 difLightColor;
uniform vec3 ambLightColor;
uniform int colorOverride;

//Texture Samplers
uniform sampler2D tex0;
uniform sampler2D BakeShadowMap;
uniform sampler2D spl;
uniform sampler2D nrm;
uniform sampler2D BakeLightMap;
uniform sampler2D UVTestPattern;
uniform sampler2D Metalness;
uniform sampler2D Roughness;
uniform sampler2D MRA; 

uniform mat4 modelview;

//Shader Params via BFRES
uniform float normal_map_weight;

// Channel Toggles
uniform int renderR;
uniform int renderG;
uniform int renderB;
uniform int renderAlpha;

out vec4 FragColor;

vec2 displayTexCoord =  f_texcoord0;

vec3 CalcBumpedNormal(vec3 inputNormal) //Currently reused some bits from nud shader. 
{
    // if no normal map, then return just the normal
    if(useNormalMap == 0)
	   return inputNormal;

    float normalIntensity = 3;

	if (normal_map_weight != 0) //MK8 and splatoon 1/2 uses this param
	      normalIntensity = normal_map_weight;

    vec3 BumpMapNormal = texture(nrm, displayTexCoord).xyz;
    BumpMapNormal = mix(vec3(0.5, 0.5, 1), BumpMapNormal, normalIntensity); // probably a better way to do this
    BumpMapNormal = 2.0 * BumpMapNormal - vec3(1);

	vec3 B = vec3(0);

    vec3 NewNormal;
    vec3 Normal = normalize(normal);
	if (bitangent != vec3(0))
	    B = normalize(bitangent);
    mat3 TBN = mat3(tangent, B, Normal);
    NewNormal = TBN * BumpMapNormal;
    NewNormal = normalize(NewNormal);

    return NewNormal;
}

void main()
{
    if (uvChannel == 2)
    {
        displayTexCoord =  f_texcoord1;
    }
    if (colorOverride == 1)
    {
        // Wireframe color.
        FragColor = vec4(1);
        return;
    }
 

  //Diffuse
    vec3 colordiff = texture(tex0, displayTexCoord).rgb;
    vec3 ambient = 0.15 * colordiff;
    vec3 lightColor = vec3(1.0);
    float diff = max(dot(difLightColor, normal), 0.0);
    vec3 diffuse = diff * lightColor;

  //Normal Map
	vec3 bumpMapNormal = CalcBumpedNormal(normal);
    float halfLambert = dot(difLightDirection, bumpMapNormal) * 0.5 + 0.5;
    halfLambert = (halfLambert + 1) / 2;

    float normalBnW = dot(vec4(bumpMapNormal * mat3(modelview), 1.0), vec4(0.25,0.25,0.25,1.0));

  //Shadow Map
    vec3 ShadowDepth = texture(BakeShadowMap, f_texcoord1).ggg;

  //Ambient Occusion Map
    vec3 AmbientDepth = texture(BakeShadowMap, f_texcoord1).rrr;

  //Light Map
    vec3 LightColor = texture(BakeLightMap, f_texcoord2).rgb;
    vec4 LightAmount = texture2D(BakeLightMap, f_texcoord2).aaaa;

	vec4 outputlight = (vec4(LightColor, 1));


  //Light Setup
    vec3 lighting = mix(ambLightColor, difLightColor, halfLambert); // gradient based lighting
    vec4 ambiant = vec4(0.8,0.8,0.8,1.0) * texture(tex0, displayTexCoord).rgba;
    vec4 alpha = texture2D(tex0, displayTexCoord).aaaa;

	vec4 outputColor =  (vec4(texture(tex0, displayTexCoord).rgb, 1) * vec4(0.85,0.85,0.85,1.0) * normalBnW);


  //Default Shader
    FragColor =  ambiant + vec4(((0.9,0.9,0.9 * alpha * outputColor)).xyz, alpha.x * halfLambert);




	// This area below is for debug settings!


    
    vec3 displayNormal = (bumpMapNormal * 0.5) + 0.5;

    vec3 displayTangent = (tangent * 0.5) + 0.5;
    if (dot(tangent, vec3(1)) == 0)
        displayTangent = vec3(0);

    vec3 displayBitangent = (bitangent * 0.5) + 0.5;
    if (dot(bitangent, vec3(1)) == 0)
        displayBitangent = vec3(0);


    if (renderVertColor == 1)
	    FragColor *= min(color, vec4(1));

    if (renderType == 1) // normals vertexColor
        FragColor = vec4(displayNormal,1);


    else if (renderType == 2) // Currently loads shadows from bake map. May change to it's own tab or something
    {
        float normalBnW = dot(vec4(bumpMapNormal * mat3(modelview), 1.0), vec4(0.15,0.15,0.15,1.0));
        FragColor.rgb = vec3(normalBnW);
     //     FragColor =  vec4(texture(BakeShadowMap, f_texcoord1).ggg, 1);
    }
	else if (renderType == 4) //Display Normal
	{
        FragColor =  vec4(texture(nrm, displayTexCoord).rgb, 1);
	}
    else if (renderType == 5) // vertexColor
        FragColor = color;
	else if (renderType == 6) //Display Ambient Occlusion
	{
        FragColor =  vec4(texture(BakeShadowMap, f_texcoord1).rrr, 1);
	}
    else if (renderType == 7) // uv coords
        FragColor = vec4(displayTexCoord.x, displayTexCoord.y, 1, 1);
    else if (renderType == 8) // uv test pattern
	{
        FragColor = vec4(texture(UVTestPattern, displayTexCoord).rgb, 1);
	}
    else if (renderType == 9) //Display tangents
        FragColor = vec4(displayTangent,1);
    else if (renderType == 10) //Display bitangents
        FragColor = vec4(displayBitangent,1);
    else if (renderType == 11) //Display lights from second bake map if exists
   //     FragColor =  vec4(texture(BakeLightMap, f_texcoord2).rgb, 1);

        FragColor =  vec4(texture(BakeShadowMap, f_texcoord1).rrr, 1) * vec4(((20,20,20 * alpha * outputColor)).xyz, 1.0) *  vec4(((0.9,0.9,0.9 * LightAmount * outputlight)).xyz, 1.0);


    // Toggles rendering of individual color channels for all render modes.
    FragColor.rgb *= vec3(renderR, renderG, renderB);
    if (renderR == 1 && renderG == 0 && renderB == 0)
        FragColor.rgb = FragColor.rrr;
    else if (renderG == 1 && renderR == 0 && renderB == 0)
        FragColor.rgb = FragColor.ggg;
    else if (renderB == 1 && renderR == 0 && renderG == 0)
        FragColor.rgb = FragColor.bbb;

    if (renderAlpha != 1)
        FragColor.a = 1;
}