#version 330

in vec2 f_texcoord0;
in vec2 f_texcoord1;
in vec3 normal;
in vec4 color;

uniform vec3 difLightDirection;
uniform int renderType;
uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D spl;
uniform sampler2D nrm;
uniform vec4 colorSamplerUV;
uniform sampler2D UVTestPattern;
uniform int renderVertColor;

out vec4 FragColor;

void
main()
{
    vec3 displayNormal = normal.xyz;
    displayNormal = (displayNormal + 1) / 2;

    vec3 norm = 2.0 * texture2D (nrm, f_texcoord0).rgb - 1.0;
    //norm = normalize (norm);
    float lamberFactor= dot (vec3(0.85, 0.85, 0.85), norm) * 1.5;

	float halfLambert = dot(difLightDirection, normal.xyz);
    halfLambert = (halfLambert + 1) / 2;
    vec3 lighting = mix(vec3(1.0), vec3(1.0), halfLambert); // gradient based lighting

    vec4 ambiant = vec4(0.8,0.8,0.8,1.0) * texture(tex0, f_texcoord0).rgba;

    //float specular = -0.4 *(texture(spl, f_texcoord0).r - 1);
    //specular = normalize(specular);

    vec4 alpha = texture2D(tex0, f_texcoord0).aaaa;
    //if(alpha.a < 0.5) discard;   
	
    float red = texture2D(tex0, f_texcoord0).r;

	vec3 n = normalize(normal.xyz);

	vec4 outputColor = ambiant + (vec4(texture(tex0, f_texcoord0).rgb, 1) * vec4(0.85,0.85,0.85,1.0) * vec4( 0.5 + 0.5 * n, 1.0));
    FragColor =  vec4(((color * alpha * outputColor)).xyz, alpha.x * color.w);
    //gl_FragData[1] = vec4(texture2D(tex0, f_texcoord0))

    if (renderVertColor == 1)
        FragColor *= color.rgba;
	else
	    FragColor =  vec4(((0.9,0.9,0.9 * alpha * outputColor)).xyz, alpha.x * 1.0);

    if (renderType == 1) // normals vertexColor
        FragColor = vec4(displayNormal,1);
    else if (renderType == 2) // lighting
    {
        FragColor.rgb = lighting;
    }
    else if (renderType == 7) // uv coords
        FragColor = vec4(f_texcoord0.x, f_texcoord0.y, 1, 1);
    else if (renderType == 8) // uv test pattern
        FragColor = vec4(texture(UVTestPattern, f_texcoord0).rgb, 1);
    else if (renderType == 5) // vertexColor
        FragColor = color;
}