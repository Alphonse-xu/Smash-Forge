#version 330

in vec3 vPosition;
in vec4 vColor;
in vec3 vNormal;
in vec3 vTangent;
in vec3 vBiTangent;
in vec2 vUV;
in vec2 vUV2;
in vec2 vUV3;
in vec4 vBone;
in vec4 vWeight;
in vec4 vBoneHash;

out vec3 viewPosition;
out vec3 objectPosition;
out vec3 tangent;
out vec3 bitangent;
out vec4 vertexColor;

out vec2 texcoord;
out vec2 texcoord2;
out vec2 texcoord3;
out vec2 normaltexcoord;

out vec3 normal;
out vec3 fragpos;
out vec4 viewNormals;
out float boneDisplay;

uniform vec4 colorSamplerUV;
uniform vec4 colorSampler2UV;
uniform vec4 colorSampler3UV;
uniform vec4 normalSamplerAUV;
uniform mat4 mvpMatrix;
uniform uint flags;
uniform vec3 NSC;

uniform float zScale;
uniform vec4 zOffset;

uniform float elapsedTime;
uniform int useDirectUVTime;
uniform int selectedBoneIndex;


uniform bones
{
    mat4 transforms[200];
} bones_;

uniform int renderType;

vec4 skin(vec3 po, ivec4 index);
vec3 skinNRM(vec3 po, ivec4 index);

float BoneWeightDisplay()
{
    float result = 0;
    if (selectedBoneIndex == vBone.x)
        result += vWeight.x;
    if (selectedBoneIndex == vBone.y)
        result += vWeight.y;
    if (selectedBoneIndex == vBone.z)
        result += vWeight.z;
    if (selectedBoneIndex == vBone.w)
        result += vWeight.w;

    return result;
}

vec4 skin(vec3 po, ivec4 index)
{
    vec4 oPos = vec4(po.xyz, 1.0);

    oPos = bones_.transforms[index.x] * vec4(po, 1.0) * vWeight.x;
    oPos += bones_.transforms[index.y] * vec4(po, 1.0) * vWeight.y;
    oPos += bones_.transforms[index.z] * vec4(po, 1.0) * vWeight.z;
    oPos += bones_.transforms[index.w] * vec4(po, 1.0) * vWeight.w;

    return oPos;
}

vec3 skinNRM(vec3 nr, ivec4 index)
{
    vec3 nrmPos = vec3(0);

    if(vWeight.x != 0.0) nrmPos = mat3(bones_.transforms[index.x]) * nr * vWeight.x;
    if(vWeight.y != 0.0) nrmPos += mat3(bones_.transforms[index.y]) * nr * vWeight.y;
    if(vWeight.z != 0.0) nrmPos += mat3(bones_.transforms[index.z]) * nr * vWeight.z;
    if(vWeight.w != 0.0) nrmPos += mat3(bones_.transforms[index.w]) * nr * vWeight.w;

    return nrmPos;
}

void main()
{
    vec4 objPos = vec4(vPosition.xyz, 1.0);
    objectPosition = objPos.xyz;

    // vertex skinning
    if(vBone.x != -1.0)
       objPos = skin(vPosition, ivec4(vBone));

    objPos.xyz += NSC;
    objPos.z *= zScale;

    objPos = mvpMatrix * vec4(objPos.xyz, 1.0);
    gl_Position = objPos;

    if ((useDirectUVTime == 1) && (flags & 0x00001900u) == 0x00001900u)
    {
        texcoord = vec2((vUV * colorSamplerUV.xy) + (colorSamplerUV.zw * elapsedTime));
        texcoord2 = vec2((vUV2 * colorSamplerUV.xy) + (colorSamplerUV.zw * elapsedTime));
        texcoord3 = vec2((vUV3 * colorSamplerUV.xy) + (colorSamplerUV.zw * elapsedTime));
        normaltexcoord = vec2((vUV * normalSamplerAUV.xy) + (normalSamplerAUV.zw * elapsedTime));
    }
    else
    {
        texcoord = vec2((vUV * colorSamplerUV.xy) + colorSamplerUV.zw);
        texcoord2 = vec2((vUV2 * colorSamplerUV.xy) + (colorSamplerUV.zw));
        texcoord3 = vec2((vUV3 * colorSamplerUV.xy) + (colorSamplerUV.zw));
        normaltexcoord = vec2((vUV * normalSamplerAUV.xy) + normalSamplerAUV.zw);
    }

    normal = vec3(0,0,0);
    tangent.xyz = vTangent.xyz;
    bitangent.xyz = vBiTangent.xyz;
    viewPosition = vec3(vPosition * mat3(mvpMatrix));

    // calculate view space normals for sphere map rendering
	viewNormals = transpose(inverse(mvpMatrix)) * vec4(vNormal.xyz, 0);

    // fragment shader stuff
    boneDisplay = BoneWeightDisplay();
    vertexColor = vColor;
	fragpos = objPos.xyz;

	if(vBone.x != -1.0)
		normal = normalize((skinNRM(vNormal.xyz, ivec4(vBone))).xyz);
	else
		normal = vNormal;
}
