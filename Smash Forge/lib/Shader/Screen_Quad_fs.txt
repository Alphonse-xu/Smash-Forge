#version 330
in vec2 texCoord;

uniform sampler2D image0;
uniform sampler2D image1;

uniform float weight[5] = float[] (0.2270270270, 0.1945945946, 0.1216216216, 0.0540540541, 0.0162162162);

out vec4 fragColor;

void main()
{
    fragColor = vec4(0,0,0,1);
    vec4 textureColor0 = texture(image0, vec2(texCoord.x, texCoord.y)).rgba;
    vec4 textureColor1 = texture(image1, vec2(texCoord.x, texCoord.y)).rgba;


    // Used for pixel offset
    vec2 textureOffset = 1.0 / textureSize(image1, 0);

    // Gaussian blur.
    vec3 blurResult = textureColor1.rgb * weight[0];
    int blurAmount = 5;
    // Horizontal Blur
    for (int i = 0; i < blurAmount; ++i)
    {
        blurResult += texture(image1, texCoord + vec2(textureOffset.x * i, 0)).rgb * weight[i];
        blurResult += texture(image1, texCoord - vec2(textureOffset.x * i, 0)).rgb * weight[i];
    }
    // Vertical Blur
    for (int i = 0; i < blurAmount; ++i)
    {
        blurResult += texture(image1, texCoord + vec2(0, textureOffset.y * i)).rgb * weight[i];
        blurResult += texture(image1, texCoord - vec2(0, textureOffset.y * i)).rgb * weight[i];
    }



    fragColor.rgb = textureColor0.rgb + blurResult;
}
