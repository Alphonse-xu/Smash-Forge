#version 330

in vec3 viewPosition;
in vec3 objectPosition;
in vec2 texCoord;
in vec2 texCoord2;
in vec2 texCoord3;
in vec2 normaltexCoord;
in vec4 vertexColor;
in vec3 normal;
in vec3 viewNormal;
in vec3 tangent;
in vec3 bitangent;

out vec4 fragColor;

// Textures
uniform sampler2D dif;
uniform sampler2D dif2;
uniform sampler2D dif3;
uniform sampler2D ramp;
uniform sampler2D dummyRamp;
uniform sampler2D normalMap;
uniform sampler2D ao;
uniform samplerCube cube;
uniform samplerCube stagecube;
uniform sampler2D spheremap;
uniform samplerCube cmap;
uniform sampler2D UVTestPattern;

// flags tests
uniform int hasDif;
uniform int hasDif2;
uniform int hasDif3;
uniform int hasStage;
uniform int hasCube;
uniform int hasNrm;
uniform int hasRamp;
uniform int hasAo;
uniform int hasSphereMap;
uniform int hasDummyRamp;
uniform int hasColorGainOffset;
uniform int hasSpecularParams;
uniform int useDiffuseBlend;
uniform int hasDualNormal;
uniform int hasSoftLight;
uniform int hasCustomSoftLight;
uniform int hasFinalColorGain;
uniform int useDifRefMask;
uniform int hasBayoHair;
uniform int softLightBrighten;
uniform int hasUniverseParam;

// Da Flags
uniform uint flags;
uniform int isTransparent;

uniform int lightSet;
uniform int isStage;
uniform int renderStageLighting;

// NU_ Material Properties
uniform vec4 colorOffset;
uniform vec4 aoMinGain;
uniform vec4 fresnelColor;
uniform vec4 specularColor;
uniform vec4 specularColorGain;
uniform vec4 diffuseColor;
uniform vec4 characterColor;
uniform vec4 colorGain;
uniform vec4 finalColorGain;
uniform vec4 finalColorGain2;
uniform vec4 finalColorGain3;
uniform vec4 reflectionColor;
uniform vec4 fogColor;
uniform vec4 effColorGain;
uniform vec4 zOffset;

// NU_ material params
uniform vec4 fresnelParams;
uniform vec4 specularParams;
uniform vec4 reflectionParams;
uniform vec4 fogParams;
uniform vec4 normalParams;
uniform vec4 angleFadeParams;
uniform vec4 dualNormalScrollParams;
uniform vec4 alphaBlendParams;
uniform vec4 softLightingParams;
uniform vec4 customSoftLightParams;
uniform vec4 effUniverseParam;

// render settings
uniform int renderDiffuse;
uniform int renderSpecular;
uniform int renderFresnel;
uniform int renderReflection;
uniform int renderType;
uniform int renderLighting;
uniform int renderVertColor;
uniform int renderNormal;
uniform int useNormalMap;
uniform int renderAlpha;

uniform float diffuseIntensity;
uniform float ambientIntensity;
uniform float specularIntensity;
uniform float fresnelIntensity;
uniform float reflectionIntensity;

// character lighting
uniform vec3 difLightColor;
uniform vec3 ambLightColor;
uniform vec3 difLightDirection;

uniform vec3 difLight2Color;
uniform vec3 ambLight2Color;
uniform vec3 difLight2Direction;

uniform vec3 difLight3Color;
uniform vec3 ambLight3Color;
uniform vec3 difLight3Direction;

uniform vec3 fresGroundColor;
uniform vec3 fresSkyColor;
uniform vec3 specLightColor;
uniform vec3 fresSkyDirection;
uniform vec3 fresGroundDirection;

uniform vec3 specLightDirection;
uniform vec3 refLightColor;

// stage light 1
uniform int renderStageLight1;
uniform vec3 stageLight1Color;
uniform vec3 stageLight1Direction;

// stage light 2
uniform int renderStageLight2;
uniform vec3 stageLight2Color;
uniform vec3 stageLight2Direction;

// stage light 3
uniform int renderStageLight3;
uniform vec3 stageLight3Color;
uniform vec3 stageLight3Direction;

// stage light 4
uniform int renderStageLight4;
uniform vec3 stageLight4Color;
uniform vec3 stageLight4Direction;

// light_set fog
uniform int renderFog;
uniform vec3 stageFogColor;

uniform int colorOverride;

uniform mat4 mvpMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 sphereMapMatrix;
uniform mat4 rotationMatrix;


uniform sampler2D shadowMap;

uniform vec3 NSC;
uniform float elapsedTime;

uniform vec3 cameraPosition;

// Constants
#define gamma 2.2
#define PI 3.14159

float Luminance(vec3 rgb)
{
    const vec3 W = vec3(0.2125, 0.7154, 0.0721);
    return dot(rgb, W);
}

vec3 CalculateTintColor(vec3 diffuseColor, float tintAmount)
{
    // Approximation of overlay blend mode.
    return mix(vec3(1), (diffuseColor * 2), min(tintAmount * 0.5, 1));
}

float ShadowCalculation(vec4 fragPosLightSpace)
{
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    float closestDepth = texture(shadowMap, projCoords.xy).r;
    float currentDepth = projCoords.z;
    float shadow = currentDepth > closestDepth  ? 1.0 : 0.0;

    return shadow;
}

vec3 CalcBumpedNormal(vec3 inputNormal)
{
    if(hasNrm == 0 || useNormalMap == 0)
	   return inputNormal;

    vec3 bumpMapNormal = texture(normalMap, normaltexCoord).xyz;
    vec3 bumpMapNormal2 = texture(normalMap, vec2(normaltexCoord.x + dualNormalScrollParams.x, normaltexCoord.y + dualNormalScrollParams.y)).xyz;
    if(hasDualNormal == 1)
        bumpMapNormal = normalize(bumpMapNormal + bumpMapNormal2);

    // Change normal map intensity.
    bumpMapNormal = mix(vec3(0.5, 0.5, 1), bumpMapNormal, normalParams.x);

    bumpMapNormal = 2.0 * bumpMapNormal - vec3(1);
    mat3 tbnMatrix = mat3(tangent, bitangent, normalize(normal));
    vec3 newNormal = tbnMatrix * bumpMapNormal;
    return normalize(newNormal);
}

vec3 ScreenBlend(vec3 base, vec3 top)
{
    return vec3(1) - (vec3(1) - base) * (vec3(1) - top);
}

vec3 RampColor(vec3 color){
	if(hasRamp == 1)
	{
		float rampCoord = Luminance(color);
		rampCoord = clamp(rampCoord, 0.01, 0.99);
		return texture(ramp, vec2(1 - rampCoord, 0.50)).rgb;
	}
	else
		return vec3(0);
}

vec3 DummyRampColor(vec3 color){
	if(hasDummyRamp == 1)
	{
		float rampCoord = Luminance(color);
		rampCoord = clamp(rampCoord, 0.01, 0.99);
		return texture(dummyRamp, vec2(1 - rampCoord, 0.50)).rgb;
	}
	else
		return vec3(0);
}

vec3 SphereMapColor(vec3 N)
{
    if (hasSphereMap == 1)
    {
        // Calculate UVs based on view space normals.
        vec2 sphereTexcoord = vec2(viewNormal.x, (1 - viewNormal.y));
        return texture(spheremap, sphereTexcoord).xyz;
    }
    else
        return vec3(0);
}

vec3 ShiftTangent(vec3 tangent, vec3 normal, float shift) // probably not needed
{
    vec3 shiftedT = tangent + shift * normal;
    return normalize(shiftedT);
}

vec3 RemapToVisible(vec3 value) {
    // [-1,1] -> [0,1]
    return value * 0.5 + 0.5;
}

float RemapToVisible(float value) {
    // [-1,1] -> [0,1]
    return value * 0.5 + 0.5;
}

float CalculateFresnel(vec3 I, vec3 N)
{
    return max(1 - max(dot(I, N), 0), 0);
}

vec3 BayoHairSpecular(vec3 diffuseMap, vec3 I, float xComponent, float yComponent)
{
    float shiftTex = diffuseMap.g; // vertical component of ramp?
    shiftTex = 0;

    vec3 t1 = ShiftTangent(tangent.xyz, normal.xyz, shiftTex);
    vec3 t2 = ShiftTangent(bitangent.xyz, normal.xyz, shiftTex);

    float specExp1 = reflectionParams.z;
    float specExp2 = reflectionParams.w;

    vec3 hairSpecular =  vec3(1);
    float specMask = diffuseMap.b; // what channel should this be?

    vec3 halfAngle = normalize(I + specLightDirection);
    float test = dot(t2, halfAngle)/reflectionParams.w;
    test = (test + 1) / 2;
    float test2 = diffuseMap.g;

    // TODO: Find proper constants.
    hairSpecular = texture(dummyRamp, vec2(test, test2)).rgb * diffuseMap.b * alphaBlendParams.z * 0.1;
    return (hairSpecular) * diffuseMap.r * 20;
}

vec3 SoftLighting(vec3 ambient, vec3 diffuse, vec4 params,
    float darkenMultiplier, float saturationMultiplier, float halfLambert)
{
    // blend between a certain distance from dot(L,N) = 0.5
    float edgeL = 0.5 - (params.z / 2);
    float edgeR = 0.5 + (params.z / 2);
    float smoothLambert = smoothstep(edgeL, edgeR, halfLambert);

    // darken ambientIntensity color to counteract flat stage lighting
    float ambientGain = max(1 - (darkenMultiplier * params.y), 0);

    // more saturated and darker ambient color
    ambient *= ambientGain;
    // TODO: Pretty sure this is simpler.
    // vec3 ambientHSV = RGB2HSV(ambient);
    // ambientHSV = vec3(ambientHSV.x, (ambientHSV.y + (saturationMultiplier * params.x)), ambientHSV.z);
    // ambient = HSV2RGB(ambientHSV);

    // custom diffuse gradient
    return mix(ambient, diffuse, smoothLambert);
}

vec3 FresnelPass(vec3 N, vec3 I, vec3 tintColor, vec4 diffuseMap, float aoMap, float aoMixIntensity)
{
    vec3 fresnelPass = vec3(0);

    // hemisphere fresnel with fresnelParams exponent
    float hemiBlendSky = dot(N, fresSkyDirection) * 0.5 + 0.5;
    vec3 hemiColorSky = mix(vec3(0), fresSkyColor, hemiBlendSky);

    float hemiBlendGround = dot(N, fresGroundDirection) * 0.5 + 0.5;
    vec3 hemiColorGround = mix(vec3(0), fresGroundColor, hemiBlendGround);

    float exponentOffset = 2.75; // could be more accurate
    vec3 fresnel = clamp(((hemiColorSky + hemiColorGround) * pow(CalculateFresnel(I, N), exponentOffset + fresnelParams.x)), 0, 1);
    fresnelPass += fresnelColor.rgb * fresnel * fresnelIntensity * tintColor;

    if ((flags & 0x0000FF00u) == 0x00003000u)
        fresnelPass *= diffuseMap.rgb;

    fresnelPass *= mix(aoMap, 1, aoMixIntensity);

    return fresnelPass;
}

vec3 ReflectionPass(vec3 I, vec3 N, vec3 tintColor, vec4 diffuseMap, float aoMap, float aoMixIntensity)
{
    vec3 reflectionPass = vec3(0);
	// cubemap reflection
	vec3 R = reflect(I, N);
	R.y *= -1.0;
	vec3 stageCubeColor = texture(stagecube, R).rgb;

	// flags based corrections for reflection
	if (hasCube == 1) // cubemaps from model.nut. currently just uses miiverse cubemap
		reflectionPass += diffuseMap.aaa * stageCubeColor * tintColor * reflectionParams.x;

	reflectionPass += SphereMapColor(normal.xyz) * reflectionColor.xyz * tintColor;
	reflectionPass += reflectionColor.rgb * stageCubeColor * tintColor;

    reflectionPass *= mix(aoMap, 1, aoMixIntensity);
    reflectionPass *= refLightColor;
    reflectionPass *= reflectionIntensity;

    if (useDifRefMask == 1)
        reflectionPass *= diffuseMap.a;

    reflectionPass = pow(reflectionPass, vec3(gamma));
    return reflectionPass;
}

vec3 SpecularPass(vec3 N, vec3 I, vec4 diffuseMap, vec3 tintColor, float aoMap, float aoMixIntensity)
{
    vec3 specularPass = vec3(0);

    // blinn phong with anisotropy
    vec3 halfAngle = normalize(specLightDirection + I);
    vec3 X = normalize(tangent);
    vec3 Y = normalize(bitangent);
    float ax = reflectionParams.z;
    float ay = reflectionParams.w;
    float xComponent = max(pow((dot(halfAngle, X) / ax), 2), 0);
    float yComponent = max(pow((dot(halfAngle, Y) / ay), 2), 0);

    // only use anisotropy for mats without specularparams
    float exponent = xComponent + yComponent;
    if (hasSpecularParams == 1)
        exponent = specularParams.y;

    float blinnPhongSpec = dot(halfAngle, N);
    blinnPhongSpec = pow(blinnPhongSpec, exponent);

    // flags based corrections for specular
    if (hasBayoHair == 1) // bayo hair mats. rework this section
        specularPass = BayoHairSpecular(diffuseMap.rgb, I, xComponent, yComponent);
    else if (hasColorGainOffset == 1) // how does specularColorGain work?
        specularPass += specularColor.rgb * blinnPhongSpec * (specularColorGain.rgb);
    else if ((flags & 0x00E10000u) == 0x00E10000u) // not sure how this works. specular works differently for eye mats
        specularPass += specularColor.rgb * blinnPhongSpec * 0;
    else // default
        specularPass += specularColor.rgb * blinnPhongSpec;

    specularPass *= mix(aoMap, 1, aoMixIntensity);
    specularPass *= tintColor;
    specularPass *= specLightColor;
    specularPass *= specularIntensity;

    specularPass = pow(specularPass, vec3(gamma));
    return specularPass;
}

float CalculateAngleFade(vec3 I, vec3 N)
{
    float fresnelBlend = CalculateFresnel(I, N);
    float angleFadeAmount = mix(angleFadeParams.x, angleFadeParams.y, fresnelBlend);
    return max((1 - angleFadeAmount), 0);
}

vec3 CalculateFog(vec3 inputColor)
{
    float depth = viewPosition.z;
    depth = clamp((depth / fogParams.y), 0, 1);
    float fogIntensity = mix(fogParams.z, fogParams.w, depth);
    if(renderFog == 1 && renderStageLighting == 1)
        return mix(inputColor, pow((stageFogColor), vec3(gamma)), fogIntensity);
    else
        return inputColor;
}

vec3 CalculateUniverseColor(float param)
{
    // Account for camera position and rotation for projection.
    vec3 projVec = normalize(objectPosition.xyz - cameraPosition.xyz);
    projVec = mat3(modelViewMatrix) * projVec;
    // Cheap approximations of trig functions.
    float uCoord = projVec.x * 0.5 + 0.5;
    float vCoord = projVec.y * 0.5 + 0.5;
    return texture(dif, vec2(uCoord * param, 1- vCoord)).rgb;
}


vec3 CalculateLighting(vec3 N, float halfLambert)
{
    vec3 lighting = vec3(1);

    if (isStage == 1) // stage lighting
    {
        // should this be half lambert?
        vec3 stageLight1 = stageLight1Color * max((dot(N, stageLight1Direction)), 0);
        vec3 stageLight2 = stageLight2Color * max((dot(N, stageLight2Direction)), 0);
        vec3 stageLight3 = stageLight3Color * max((dot(N, stageLight3Direction)), 0);
        vec3 stageLight4 = stageLight4Color * max((dot(N, stageLight4Direction)), 0);

        lighting = vec3(0);
        lighting += (stageLight1 * renderStageLight1);
        lighting += (stageLight2 * renderStageLight2);
        lighting += (stageLight3 * renderStageLight3);
        lighting += (stageLight4 * renderStageLight4);
    }
    else // gradient based character lighting
    {
        lighting = vec3(0);
        lighting += mix(ambLightColor * ambientIntensity, difLightColor * diffuseIntensity, halfLambert);
    }

    // flags for "no lighting"
    if (((flags & 0x0F000000u) < 0x04000000u) || renderStageLighting != 1)
        lighting = vec3(1);

    return lighting;
}

vec3 DiffusePass(vec3 N, float aoMap, vec4 diffuseMap)
{
    vec3 diffusePass = vec3(0);

    if (hasUniverseParam == 1)
        return CalculateUniverseColor(effUniverseParam.x);

    // lambertian shading
    float halfLambert = dot(difLightDirection, N) * 0.5 + 0.5;
    float halfLambert2 = dot(difLight2Direction, N) * 0.5 + 0.5;
    float halfLambert3 = dot(difLight3Direction, N) * 0.5 + 0.5;
    vec3 diffuseColorFinal = vec3(0); // result of diffuse map, aoBlend, and some NU_values
    float diffuseLuminance = Luminance(diffuseMap.rgb); // used for colorGain and colorOffset

    // ambient occlusion calculations
    // TODO: Fix ao saturation
    float maxAOBlendValue = 1.25;
    vec3 aoBlend = vec3(aoMap);
    aoBlend = min((aoBlend + aoMinGain.rgb), vec3(maxAOBlendValue));
    float aoMixIntensity = aoMinGain.a;

    if (hasColorGainOffset == 1) // probably a more elegant solution...
    {
        diffuseColorFinal = colorOffset.rgb + (vec3(Luminance(diffuseMap.rgb)) * (colorGain.rgb));

        if (hasBayoHair == 1) // bayo hair diffuse is weird
        {
            diffuseColorFinal = colorOffset.rgb + (diffuseMap.rrr * colorGain.rgb);
            diffuseColorFinal *= alphaBlendParams.w; // #justbayothings
            aoMap = 1; // dont know bayo ao yet (if it exists)
        }
    }
    else // regular characters
    {
        diffuseColorFinal = diffuseMap.rgb * aoBlend * diffuseColor.rgb;
    }

    // Stage lighting
    vec3 lighting = CalculateLighting(N, halfLambert);

    // Dummy ramp calculations.
    float rampIntensity = 0.75;
    vec3 rampTotal = (0.2 * RampColor(vec3(halfLambert))) + (0.75 * DummyRampColor(vec3(halfLambert)));
    vec3 rampAdd = mix(vec3(0), rampTotal, halfLambert);

    diffusePass = diffuseColorFinal * lighting;
    // TODO: Fix ramp shading.
    // diffusePass += diffusePass * min(rampAdd, vec3(1));

    vec3 softLightDif = diffuseColorFinal * difLightColor;
    vec3 softLightAmb = diffuseColorFinal * ambLightColor;
    if (hasSoftLight == 1)
        diffusePass = SoftLighting(softLightAmb, softLightDif, softLightingParams, 0.3, 0.0561, halfLambert);
    else if (hasCustomSoftLight == 1)
        diffusePass = SoftLighting(softLightAmb, softLightDif, customSoftLightParams, 0.3, 0.114, halfLambert);

    // used with softlightingparams and customSoftLightParams, respectively
    // this could be moved outside the shader
    if (softLightBrighten == 1)
        diffusePass *= 1.5;

    diffusePass = pow(diffusePass, vec3(gamma));
    return diffusePass;
}

vec3 SmashShader(vec4 diffuseMap, float aoMap, vec3 N, vec3 I){
    // used for wireframe rendering
    if (colorOverride == 1)
        return vec3(1);

    float aoMixIntensity = aoMinGain.w;

	// Calculate the color tints
	vec3 specTintColor = CalculateTintColor(diffuseMap.rgb, specularColor.a);
	vec3 fresTintColor = CalculateTintColor(diffuseMap.rgb, fresnelColor.a);
	vec3 reflTintColor = CalculateTintColor(diffuseMap.rgb, reflectionColor.a);

    if (useDiffuseBlend == 1) // aomingain but no ao map (mainly for trophies)
    {
        // should this use color? party ball item is not saturated enough
        aoMap = Luminance(diffuseMap.rgb);
        aoMixIntensity = 0;
    }

    // render passes
    vec3 diffusePass = DiffusePass(N, aoMap, diffuseMap);
    vec3 specularPass = SpecularPass(N, I, diffuseMap, specTintColor, aoMap, aoMixIntensity);
    vec3 fresnelPass = FresnelPass(N, I, fresTintColor, diffuseMap, aoMap, aoMixIntensity);
	vec3 reflectionPass = ReflectionPass(I, N, reflTintColor, diffuseMap, aoMap, aoMixIntensity);

	vec3 resultingColor = vec3(0);

	if(renderLighting == 1)
	{
        // prevent negative colors for some GPUs
    	resultingColor += max((diffusePass * renderDiffuse), 0);
    	resultingColor += max((fresnelPass * renderFresnel), 0);
    	resultingColor += max((specularPass * renderSpecular), 0);
    	resultingColor += max((reflectionPass * renderReflection), 0);

        // light_set_param.bin fog
        resultingColor = CalculateFog(resultingColor);
	}
	else
		resultingColor = diffusePass;

    resultingColor = pow(resultingColor, vec3(1 / gamma));
    return resultingColor;
}

void main()
{
    fragColor = vec4(0,0,0,1);

    vec3 I = vec3(0,0,-1) * mat3(mvpMatrix);
    vec3 N = CalcBumpedNormal(normal);

    // remap vectors for nicer visualization
    vec3 displayNormal = (N * 0.5) + 0.5;

    // still show <0,0,0> as black
    vec3 displayTangent = (tangent * 0.5) + 0.5;
    if (dot(tangent, vec3(1)) == 0)
        displayTangent = vec3(0);

    // still show <0,0,0> as black
    vec3 displayBitangent = (bitangent * 0.5) + 0.5;
    if (dot(bitangent, vec3(1)) == 0)
        displayBitangent = vec3(0);

    // zOffset correction
    gl_FragDepth = gl_FragCoord.z - (zOffset.x / 1500); // divide by far plane?

    // similar to du dv but uses just the normal map
    float offsetIntensity = 0;
    if(useNormalMap == 1)
        offsetIntensity = normalParams.z;
    vec2 textureOffset = 1 - texture(normalMap, normaltexCoord).xy;
    textureOffset = (textureOffset * 2) - 1; // remap to -1 to 1?
    vec2 offsetTexCoord = texCoord + (textureOffset * offsetIntensity);

    // calculate diffuse map blending to use in Shaded and Diffuse Maps render modes
    vec4 diffuse1 = vec4(0);
    vec4 diffuse2 = vec4(0);
    vec4 diffuse3 = texture(dif3, texCoord3);
    vec4 diffuseMapTotal = vec4(0);

    if (hasDif == 1) // 1st diffuse texture
    {
        diffuse1 = texture(dif, offsetTexCoord) * finalColorGain.rgba;
        diffuseMapTotal = diffuse1;

        if (hasDif2 == 1 && hasDif3 != 1) // 2nd diffuse texture. doesnt work properly with stages
        {
            diffuse2 = texture(dif2, texCoord2) * finalColorGain2.rgba;
            diffuseMapTotal = mix(diffuse2, diffuse1, diffuse1.a);
            diffuseMapTotal.a = 1.0;

            if (hasDif3 == 1)
            {
                diffuse3 = texture(dif3, texCoord3) * finalColorGain3.rgba;
                diffuseMapTotal = mix(diffuse3, diffuseMapTotal, diffuse3.a);
            }
        }
    }

    diffuseMapTotal *= characterColor.rgba;

    // use texture alpha
    if (renderAlpha == 1)
        fragColor.a = texture(dif, texCoord).a;

    if (hasDif != 1)
        diffuseMapTotal = vec4(diffuseColor);

    vec3 difAO = texture(ao, texCoord2).rgb;

    if (hasAo == 1)
    {
        float normalBlend = normal.y * 0.5 + 0.5;
        if ((flags & 0x00410000u) == 0x00410000u)
            diffuseMapTotal.rgb = mix(difAO, diffuseMapTotal.rgb, normalBlend);
        else
            diffuseMapTotal.rgb *= difAO.rgb;
    }

    // Material lighting done in SmashShader
    float aoMap = texture(normalMap, texCoord).a;
    if (hasColorGainOffset == 1)
        aoMap = Luminance(texture(dif, texCoord).rgb);
    fragColor.rgb = SmashShader(diffuseMapTotal, aoMap, N, I);

    // not sure why vertex color values are greater than 1
    if (renderVertColor == 1 || hasFinalColorGain == 1)
        fragColor *= min(vertexColor, vec4(1));

    // Universe mats are weird...
    if (hasUniverseParam != 1)
        fragColor.rgb *= effColorGain.rgb;

    // correct alpha
    fragColor.a *= finalColorGain.a;
    fragColor.a *= effColorGain.a;

    fragColor.a *= CalculateAngleFade(I, N);

    // if ((flags & 0xF0FF0000u) != 0xF0640000u) // ryu works differently.
    // need to research this more
    fragColor.a += alphaBlendParams.x;

    // alpha override
    if (renderAlpha != 1 || isTransparent != 1)
        fragColor.a = 1;

    if (fragColor.a == 0)
        discard;
}
