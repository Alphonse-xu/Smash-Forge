#version 330
in vec2 texcoord;
in vec4 color;
in vec3 normal;
in vec4 position;

uniform vec3 difLightDirection;
uniform vec3 difLightColor;
uniform vec3 ambLightColor;

uniform sampler2D tex;
uniform sampler2D UVTestPattern;

uniform vec2 uvscale;
uniform int renderType;
uniform mat4 modelview;

out vec4 FragColor;
void main()
{
    vec4 alpha = texture2D(tex, texcoord*uvscale).aaaa;

    vec3 displayNormal = normal.xyz;
    displayNormal = (displayNormal + 1) / 2;

    vec4 diffuseColor = texture2D(tex, texcoord);

    float halfLambert = dot(difLightDirection, normal.xyz);
    halfLambert = (halfLambert + 1) / 2;
    vec3 lighting = mix(ambLightColor, difLightColor, halfLambert); // gradient based lighting

    FragColor = vec4(1);
    vec3 resulting_color = diffuseColor.rgb * lighting.rgb * color.rgb;

    if (renderType == 1) // normals color
        FragColor = vec4(displayNormal,1);
    else if (renderType == 2) // normals black & white
    {
        float normalBnW = dot(vec4(normal * mat3(modelview), 1.0), vec4(0.15,0.15,0.15,1.0));
        FragColor.rgb = vec3(normalBnW);
    }
    else if (renderType == 4) // vertexColor
        FragColor = color;
    else if (renderType == 6) // uv coords
        FragColor = vec4(texcoord.x, texcoord.y, 1, 1);
    else if (renderType == 7) // uv test pattern
        FragColor = vec4(texture2D(UVTestPattern, texcoord).rgb, 1);
    else
        FragColor = vec4(resulting_color, 1);
}
