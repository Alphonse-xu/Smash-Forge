<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SFGraphics</name>
    </assembly>
    <members>
        <member name="T:SFGraphics.Cameras.Camera">
            <summary>
            A container for 4x4 camera matrices. The matrices can not be set directly.
            To edit the translation matrix, the camera position should be changed, for example.
            <para>Keyboard/mouse controls can be added by inheriting from this class and using the Pan(), Rotate(), Zoom() methods.</para>
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.Position">
            <summary>
            The position of the camera in scene units. 
            Updates all matrices when set.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.FovRadians">
            <summary>
            The vertical field of view in radians. 
            Updates all matrices when set.
            <para>Values less than or equal to 0 or greater than or equal to PI are ignored.</para>
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.FovDegrees">
            <summary>
            The vertical field of view in degrees. 
            Updates all matrices when set.
            <para>Values less than or equal to 0 or greater than or equal to 180 are ignored.</para>
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.RotationXRadians">
            <summary>
            The rotation around the x-axis in radians.
            Updates all matrices when set.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.RotationXDegrees">
            <summary>
            The rotation around the x-axis in degrees.
            Updates all matrices when set.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.RotationYRadians">
            <summary>
            The rotation around the y-axis in radians.
            Updates all matrices when set.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.RotationYDegrees">
            <summary>
            The rotation around the y-axis in degrees.
            Updates all matrices when set.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.FarClipPlane">
            <summary>
            The far clip plane of the perspective matrix.
            Updates all matrices when set.
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.NearClipPlane">
            <summary>
            The far clip plane of the perspective matrix.
            Updates all matrices when set.
            </summary>
        </member>
        <member name="F:SFGraphics.Cameras.Camera.renderWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:SFGraphics.Cameras.Camera.renderHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:SFGraphics.Cameras.Camera.modelViewMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.ModelViewMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="F:SFGraphics.Cameras.Camera.mvpMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.MvpMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="F:SFGraphics.Cameras.Camera.rotationMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.RotationMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="F:SFGraphics.Cameras.Camera.translationMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.TranslationMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="F:SFGraphics.Cameras.Camera.perspectiveMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="P:SFGraphics.Cameras.Camera.PerspectiveMatrix">
            <summary>
            
            </summary>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.#ctor(OpenTK.Vector3,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="rotX"></param>
            <param name="rotY"></param>
            <param name="renderWidth"></param>
            <param name="renderHeight"></param>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.Rotate(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="xAmount">Amount to rotate around the x-axis in radians</param>
            <param name="yAmount">Amount to rotate around the y-axis in radians</param>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.Pan(System.Single,System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="xAmount"></param>
            <param name="yAmount"></param>
            <param name="scaleByDistanceToOrigin"></param>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.Zoom(System.Single,System.Boolean)">
            <summary>
            
            </summary>
            <param name="amount"></param>
            <param name="scaleByDistanceToOrigin"></param>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.UpdateMatrices">
            <summary>
            Updates the translation, rotation, perspective, modelview, and modelviewprojection matrices.
            </summary>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.ResetToDefaultPosition">
            <summary>
            
            </summary>
        </member>
        <member name="M:SFGraphics.Cameras.Camera.FrameBoundingSphere(OpenTK.Vector3,System.Single)">
            <summary>
            
            </summary>
            <param name="center">The position of the center of the bounding sphere.</param>
            <param name="radius">The radius of the bounding sphere.</param>
        </member>
        <member name="T:SFGraphics.GLObjects.BufferObject">
            <summary>
            Encapsulates an OpenGL buffer object. Like other GLOBjects, memory is handled by GLObjectManager.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.BufferObject.Id">
            <summary>
            The value generated by GL.GenBuffer(). Do not attempt to bind this when the object has gone out of scope.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.BufferObject.BufferTarget">
            <summary>
            The target to which the buffer is bound when calling Bind().
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.BufferObject.#ctor(OpenTK.Graphics.OpenGL.BufferTarget)">
            <summary>
            Creates and binds an empty buffer of the specified target.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.BufferObject.Finalize">
            <summary>
            Decrement the reference count for this ID. The context probably isn't current, so the data is deleted later by GLObjectManager.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.BufferObject.Bind">
            <summary>
            Binds the buffer to the target specified at creation.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.Framebuffer">
            <summary>
            
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Framebuffer.Id">
            <summary>
            The value generated by GL.GenFramebuffer(). Do not attempt to bind this when the object has gone out of scope.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Framebuffer.FramebufferTarget">
            <summary>
            
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Framebuffer.PixelInternalFormat">
            <summary>
            
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Framebuffer.Width">
            <summary>
            All attached textures, renderbuffers, etc are resized when set. The framebuffer's contents will not be preserved when resizing.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Framebuffer.Height">
            <summary>
            All attached textures, renderbuffers, etc are resized when set. The framebuffer's contents will not be preserved when resizing.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Framebuffer.ColorAttachment0Tex">
            <summary>
            The Id of the first color attachment.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffer.#ctor(OpenTK.Graphics.OpenGL.FramebufferTarget)">
            <summary>
            Generates an empty framebuffer bound to the specified target.
            </summary>
            <param name="framebufferTarget"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffer.#ctor(OpenTK.Graphics.OpenGL.FramebufferTarget,System.Int32,System.Int32,OpenTK.Graphics.OpenGL.PixelInternalFormat)">
            <summary>
            Generates a framebuffer with a color attachment of the specified pixel format and dimensions. A render buffer of the same dimensions as the color attachment is generated for the depth component.
            </summary>
            <param name="framebufferTarget"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="pixelInternalFormat"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffer.GetStatus">
            <summary>
            Gets the named framebuffer status for this framebuffer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffer.ReadImagePixels(System.Boolean)">
            <summary>
            
            </summary>
            <param name="saveAlpha">The alpha channel is saved when true or discarded when false</param>
            <returns></returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffer.SamplePixelColor(System.Int32,System.Int32)">
            <summary>
            The origin (0,0) corresponds to the top left of the screen.
            The coordinates are based on the framebuffer's dimensions 
            and not the screen's dimensions.
            </summary>
            <param name="x">The horizontal pixel coordinate</param>
            <param name="y">The vertical pixel coordinate</param>
            <returns>A color with the RGBA values of the selected pixel</returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Framebuffer.Bind">
            <summary>
            Binds the framebuffer to the target specified at creation.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.GLObjectManager">
            <summary>
            Manages reference counting and resource management for all GLObjects. 
            Call DeleteUnusedGLObjects() with a valid OpenTK context current to delete objects with no references.
            The reference count is managed automatically, so there is no need to call GL.deleteTexture(), for example.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.GLObjectManager.DeleteUnusedGLObjects">
            <summary>
            Delete the memory associated with GLObjects no longer in use.
            The appropriate GL.Delete() function is called when there are no more references.
            GLObjects may not be cleaned up until long after the original object became unreachable.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.IGLObject">
            <summary>
            
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.IGLObject.Id">
            <summary>
            The value generated by GL.Gen() for a texture, buffer, etc. Do not attempt to bind this when the object has gone out of scope.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.Shaders.Shader">
            <summary>
            Encapsulates a shader program and attached shaders. Errors are stored to an internal log, which can be exported. Check if the shader was created successfully before rendering!
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.Shader.Id">
            <summary>
            The ID generated by GL.CreateProgram().
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Shaders.Shader.HasCheckedCompilation">
            <summary>
            True when the program and shader compilation have been checked for errors.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.#ctor">
            <summary>
            Initializes the programID. Attach and compile shaders with LoadShader() before using.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetFloat(System.String,System.Single)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetInt(System.String,System.Int32)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetUint(System.String,System.UInt32)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetBoolToInt(System.String,System.Boolean)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform. True = 1. False = 0.</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector3(System.String,OpenTK.Vector3)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector3(System.String,System.Single,System.Single,System.Single)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="x"></param>        
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector4(System.String,OpenTK.Vector4)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetVector4(System.String,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.SetMatrix4x4(System.String,OpenTK.Matrix4@)">
            <summary>
            Names not present in the shader are ignored and saved to the error log.
            </summary>
            <param name="uniformName">The uniform variable name</param>
            <param name="value">The value to assign to the uniform</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.GetVertexAttributeUniformLocation(System.String)">
            <summary>
            Gets the index of the vertex attribute or uniform variable. Returns -1 if not found.
            </summary>
            <param name="name">The name of the vertex attribute or uniform</param>
            <returns>The index of the attribute/uniform or -1 if not found </returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.EnableVertexAttributes">
            <summary>
            Enables the vertex attribute arrays for all active attributes.
            Ensures that extra attributes aren't enabled, which causes crashes on Geforce drivers.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.DisableVertexAttributes">
            <summary>
            Disables the vertex attribute arrays for all active attributes.
            Ensures that extra attributes aren't enabled, which causes crashes on Geforce drivers.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.GetErrorLog">
            <summary>
            Gets the error log containing hardware info, version number, compilation/linker errors, and attempts to initialize invalid uniform or vertex attribute names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.LoadShader(System.String)">
            <summary>
            Reads the specified text file and attempts to compile and attach the shader. 
            Supported shader types are fragment (.frag), vertex (.vert), and geometry (.geom).
            </summary>
            <param name="filePath">The path to a shader text file. The loaded shader type is based on the file extension.</param>
        </member>
        <member name="M:SFGraphics.GLObjects.Shaders.Shader.ProgramCreatedSuccessfully">
            <summary>
            True when the link status is ok and all attached shaders compiled.
            If false, rendering with this shader will most likely cause a crash.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.Shaders.ShaderLog">
            <summary>
            Stores hardware info, OpenGL/GLSL version, invalid uniform/attribute names, shader compilation errors, and linker errors.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.Textures.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.Id">
            <summary>
            The value generated by GL.GenTexture(). Do not attempt to bind this when the object has gone out of scope.
            </summary>
        </member>
        <member name="F:SFGraphics.GLObjects.Textures.Texture.textureTarget">
            <summary>
            The texture target used for all GL functions.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.PixelInternalFormat">
            <summary>
            
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.MinFilter">
            <summary>
            Binds and updates the TextureParameter when set.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.MagFilter">
            <summary>
            Binds and updates the TextureParameter when set.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.TextureWrapS">
            <summary>
            Binds and updates the TextureParameter when set.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.TextureWrapT">
            <summary>
            Binds and updates the TextureParameter when set.
            </summary>
        </member>
        <member name="P:SFGraphics.GLObjects.Textures.Texture.TextureWrapR">
            <summary>
            Binds and updates the TextureParameter when set.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture.#ctor(OpenTK.Graphics.OpenGL.TextureTarget,System.Int32,System.Int32,OpenTK.Graphics.OpenGL.PixelInternalFormat)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="pixelInternalFormat"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture.Finalize">
            <summary>
            Decrement the reference count for this ID. The context probably isn't current, so the data is deleted later by GLObjectManager.
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture.Bind">
            <summary>
            Binds the Id to the specified target at creation.
            </summary>
        </member>
        <member name="T:SFGraphics.GLObjects.Textures.Texture2D">
            <summary>
            
            </summary>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialize an empty Texture2D of the specified dimensions.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initialize an RGBA texture from the specified bitmap.
            </summary>
            <param name="image"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.#ctor(System.Int32,System.Int32,System.Collections.Generic.List{System.Byte[]},OpenTK.Graphics.OpenGL.PixelInternalFormat)">
            <summary>
            Initializes a texture of the specified format and loads all specified mipmaps.
            </summary>
            <param name="width">The width of the base mip level</param>
            <param name="height">The height of the base mip level</param>
            <param name="mipmaps">A list of byte arrays for each mip level</param>
            <param name="pixelInternalFormat"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.Texture2D.#ctor(System.Int32,System.Int32,System.Byte[],OpenTK.Graphics.OpenGL.PixelInternalFormat)">
            <summary>
            Initializes a texture of the specified format. The additional mip levels are generated.
            </summary>
            <param name="width">The width of the base mip level</param>
            <param name="height">The height of the base mip level</param>
            <param name="baseMipLevel">The data for the base mip level.</param>
            <param name="pixelInternalFormat"></param>
        </member>
        <member name="M:SFGraphics.GLObjects.Textures.TextureCubeMap.#ctor(System.Drawing.Bitmap,System.Int32)">
            <summary>
            
            </summary>
            <param name="cubeMapFaces">Faces arranged from top to bottom in the order
            X+, X-, Y+, Y-, Z+, Z- </param>
            <param name="sideLength">The length in pixels of a side of any of the faces</param>
        </member>
        <member name="T:SFGraphics.Tools.ColorTools">
            <summary>
            Conversion methods for HSV, RGB, color temperature, and system Colors using floats or OpenTK vectors.
            </summary>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.ColorFromUint(System.UInt32)">
            <summary>
            Converts an ARGB hex color to a system color.
            </summary>
            <param name="hexColor">ARGB color</param>
            <returns></returns>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.Vector4FromColor(System.Drawing.Color)">
            <summary>
            Converts the byte channel values of the input color [0,255] to float [0.0,1.0]. XYZW = RGBA.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.HsvToRgb(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            
            </summary>
            <param name="h">Hue in range [0,360]</param>
            <param name="s">Saturation in range [0,1]. Values outside range are clamped.</param>
            <param name="v">Value</param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.HsvToRgb(OpenTK.Vector3)">
            <summary>
            Calculates a floating point RGB color given HSV values.
            </summary>
            <param name="hsv">
            X: Hue in range [0.0,1.0],
            Y: Saturation in range [0.0,1.0],
            Z: Value
            </param>
            <returns>The given HSV color in RGB</returns>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.RgbToHsv(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="h"></param>
            <param name="s"></param>
            <param name="v"></param>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.RgbToHsv(OpenTK.Vector3)">
            <summary>
            Converts the floating point color in RGB to HSV. 
            output.X: hue in range [0,1], output.Y: saturation in range [0,1], 
            output.Z: value.
            </summary>
            <param name="rgb"></param>
            <returns></returns>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.ColorTemp2RGB(System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Calculates a visually similar RGB color to a blackbody.
            </summary>
            <param name="temp">The color temperature in Kelvin. Ex: temp = 6500 for a calibrated PC monitor.</param>
            <param name="R"></param>
            <param name="G"></param>
            <param name="B"></param>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.ClampInt(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns an int restricted between min and max.
            </summary>
            <param name="i"></param>
            <param name="min">Values lower than min are clamped to min.</param>
            <param name="max">Values higher than max are clamped to max.</param>
            <returns></returns>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.ClampFloat(System.Single,System.Single,System.Single)">
            <summary>
            Returns a float restricted between min and max.
            </summary>
            <param name="f"></param>
            <param name="min">Values lower than min are clamped to min.</param>
            <param name="max">Values higher than max are clamped to max.</param>
            <returns></returns>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.InvertColor(System.Drawing.Color)">
            <summary>
            Creates a new color with inverted RGB channels. Alpha is unchanged.
            </summary>
            <param name="color">The color used to calculate the inverted color</param>
            <returns>A color with inverted RGB but identical alpha as color</returns>
        </member>
        <member name="M:SFGraphics.Tools.ColorTools.FloatToIntClamp(System.Single,System.Int32,System.Int32)">
            <summary>
            Converts f to an int clamped to the specified range.
            </summary>
            <param name="f">Multiplied by 255 and casted to int before being clamped</param>
            <param name="min">Values lower than min are clamped to min.</param>
            <param name="max">Values higher than max are clamped to max.</param>
            <returns></returns>
        </member>
    </members>
</doc>
